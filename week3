
#################################################
# hw3.py
#
# Your name: Remington Frank-Marquez
# Your andrew id: rfrankma
#################################################

import cs112_f19_week3_linter
import math
import string
from tkinter import *

#################################################
# Helper functions
#################################################

def almostEqual(d1, d2, epsilon=10**-7):
    # note: use math.isclose() outside 15-112 with Python version 3.5 or later
    return (abs(d2 - d1) < epsilon)

import decimal
def roundHalfUp(d):
    # Round to nearest with ties going away from zero.
    rounding = decimal.ROUND_HALF_UP
    # See other rounding options here:
    # https://docs.python.org/3/library/decimal.html#rounding-modes
    return int(decimal.Decimal(d).to_integral_value(rounding=rounding))

#################################################
# Functions for you to write
#################################################

#################################################
# patternedMessage
#################################################

def removeWhitespace(s):
    newString = ''
    isWhiteSpace = False
    for c in s:
        if c in string.whitespace:
            if (isWhiteSpace):
                pass
            else:
                isWhiteSpace = True
                newString += ''
        else:
            isWhiteSpace = False
            newString += c
    return newString

#This program takes a message and a pattern and incorporates the
#message into said pattern. Any whitespace is removed from the message
#in order to make copying into the pattern much simpler. The message
#is only copied into areas of the pattern which do not contain
#whitespace.
def patternedMessage(msg, pattern):
    newString = ''
    message = removeWhitespace(msg)
    messageLength = len(message)
    placeValueInMsg = 0
    newLineString = ''
    finalString = ''

    for char in range(len(pattern)):
        #checks whether or not the current character is whitespace
        #and replaces it with the corresponding character from msg
        #if so.
        if (pattern[char].isspace() == False):
            newString += message[placeValueInMsg]
            placeValueInMsg += 1
        elif(char != 0 and char != (len(pattern)-1)):
                newString += pattern[char]
        if(placeValueInMsg >= messageLength):
            placeValueInMsg = 0
            
    return newString

#################################################
# encodeRightLeftRouteCipher + decodeRightLeftRouteCipher
#################################################
#This program encodes the given text into several rows, the odds of
#which are flipped and added to the final cipher. The amount of rows
#given is then entered into the front of the code as a prefix. For
#any empty spots in the columns, the lowercase letter starting from "z"
#to "a" are added to the end of the text and then is encoded.
def encodeRightLeftRouteCipher(text, rows):
    finalString = ''
    cols = len(text) / rows

    valOfz = ord('z')
    valOfa = ord('a')
    letterCounter = 0
    remainder = 0
    
    if(cols % 1 != 0):
        remainder = cols % 1
        cols = cols + (1-remainder)
        cols = roundHalfUp(cols)
        
    while(len(text) % rows) != 0:
        text += chr(valOfz - letterCounter)
        letterCounter += 1
        if(letterCounter == (valOfz - valOfa)):
            letterCounter = 0
            
    for i in range(1, rows+1):
        for j in range(cols):
            if(i % 2 != 0):
                finalString += text[(i-1) + (j*rows)]
            elif(i % 2 == 0):
                finalString += text[(len(text) - (rows - (i-1))) - (j*(rows))]
    
    return str(rows) + finalString

def reverseString(s):
    s = s[::-1]
    return s

#This program decodes a given cipher by first gathering the amount
#of rows from the cipher, then determining the amount of columns,
#and finally reverse engineering the code as it was scrambled in the
#program above. This program makes use of the helperFunction reverseString(s)
#in order to flip the codes in every other line.
def decodeRightLeftRouteCipher(cipher):
    currentString = ''
    cipherWithoutRow = ''
    uncipheredString = ''
    finalString = ''
    returnString = ''
    trueCurrentString = ''
    rows = int(cipher[0])
    
    for i in range(1, len(cipher)):
        cipherWithoutRow += cipher[i]
        
    lenCipher = len(cipherWithoutRow)
        
    cols = len(cipherWithoutRow) // rows

    for r in range(rows):
        for j in range(cols):
            if(r % 2 == 0):
                trueCurrentString += cipherWithoutRow[j + (cols*r)]
            
            if(r % 2 != 0):
                currentString += cipherWithoutRow[j + (cols*r)]
                trueCurrentString = reverseString(currentString)
                
        uncipheredString += trueCurrentString
        trueCurrentString = ''
        currentString = ''

    for co in range(cols):
        for ro in range(rows):
            finalString += uncipheredString[co + (ro*cols)]

    for lowers in range(len(finalString)):
        if finalString[lowers].islower():
            break
        else:
            returnString += finalString[lowers]
    return returnString
        

#################################################
# drawSimpleTortoiseProgram
#################################################
def getColor(s):
    color = ''
    if(s[0:5] == "color"):
        if(s[6:] == "none"):
            color += "white"
        color += s[6:]
    elif(s[0:5] != "color"):
        pass
    return color

def getDistance(string):
    distanceStr = ''
    distance = 0
    if(string[0:4] == "move"):
        distanceStr += string[5:]
    elif(string[0:4] != "move"):
        pass
    if(len(distanceStr) > 0):
        distance = int(distanceStr)
    return distance

def getDirection(st):
    currDirection = ''
    for i in range (len(st)):
        currDirection += st[i]
        if(currDirection == "left"):
            return int(st[i+1::])
        elif(currDirection == "right"):
            return -1 * int(st[i+1::])
    pass

def drawSimpleTortoiseProgram(program, canvas, width, height):
    currColor = ''
    moveDistance = 0
    moveDirection = 0
    lineWidth = 4
    lineWidth1 = width / 2
    lineHeight1 = height / 2
    lineWidth2 = 0
    lineHeight2 = 0
    
    for lines in program.splitlines():
        currColor += getColor(lines)
        moveDistance = getDistance(lines)
        #moveDirection = getDirections(lines)

        if(moveDistance != 0):
            canvas.create_line(lineWidth1, lineHeight1, \
                               lineWidth1 + moveDistance, lineHeight1,\
                               fill = currColor, width = lineWidth)
            currColor = ''
        

#################################################
# drawNiceRobot
#################################################
#This program uses many shapes to draw the most iconic "nice" robot.
#It's Bender from Futurama by the way. Also, sorry for the vulgairty.
#It's his catchphrase and I did my best to censor it and still make it
#slightly funny. Yeet
def drawNiceRobot(canvas, width, height):
    topCircleRadii = width / 100
    midWidth = width / 2
    midHeight = height / 2
    triangleHeight = height / 8
    thirdHeight = height / 3
    faceRadii = width / 12
    
    canvas.create_text(width/2, height/2, text='<TBD: Draw your Robot here!>')
    canvas.create_rectangle(0,0,width,height, fill = "black")
    canvas.create_oval(midWidth - topCircleRadii, 0, \
                       midWidth + topCircleRadii, topCircleRadii*2,\
                       fill = "white")
    canvas.create_polygon(midWidth-topCircleRadii, (2*topCircleRadii)+\
                          triangleHeight,\
                          midWidth+topCircleRadii, \
                          (2*topCircleRadii)+triangleHeight,\
                          midWidth, 3*topCircleRadii, fill = "white")
    canvas.create_line(midWidth-topCircleRadii, triangleHeight+ \
                       3*topCircleRadii, midWidth, triangleHeight + \
                       2.5*topCircleRadii,\
                       midWidth+topCircleRadii, triangleHeight+\
                       3*topCircleRadii, fill = "white", \
                       smooth = 1, width = 4)
    canvas.create_oval(midWidth-faceRadii, triangleHeight, \
                       midWidth + faceRadii, midHeight-triangleHeight,\
                       fill = "white", width = 4)
    canvas.create_rectangle(midWidth-faceRadii, 2*triangleHeight,\
                            midWidth+faceRadii, height, fill = "black")
    canvas.create_line(midWidth, 2*triangleHeight + topCircleRadii,\
                       midWidth-(faceRadii +2*topCircleRadii),\
                       2*triangleHeight + 4*topCircleRadii,\
                       midWidth, 2*triangleHeight + 8*topCircleRadii,\
                       midWidth+(faceRadii+2*topCircleRadii),\
                       2*triangleHeight+4*topCircleRadii,\
                       midWidth, 2*triangleHeight+ topCircleRadii,\
                       fill = "white", smooth = 1, width = width/15)
    canvas.create_line(midWidth-faceRadii, 2*triangleHeight,\
                       midWidth+faceRadii, 2*triangleHeight,\
                       fill = "black", width = 3)
    canvas.create_oval(midWidth - faceRadii, 2*triangleHeight + \
                       topCircleRadii, midWidth, 2*triangleHeight+\
                       8*topCircleRadii, fill = "white", width = 6)
    canvas.create_oval(midWidth + faceRadii, 2*triangleHeight + \
                       topCircleRadii, midWidth, 2*triangleHeight+\
                       8*topCircleRadii, fill = "white", width = 6)
    canvas.create_rectangle(midWidth - faceRadii/3, 2*triangleHeight+\
                            4*topCircleRadii, midWidth - faceRadii/2,\
                            2*triangleHeight + 5*topCircleRadii,\
                            fill = "black")
    canvas.create_rectangle(midWidth + faceRadii/3, 2*triangleHeight+\
                            4*topCircleRadii, midWidth + faceRadii/2,\
                            2*triangleHeight + 5*topCircleRadii,\
                            fill = "black")
    canvas.create_rectangle(midWidth-faceRadii, \
                            2*triangleHeight + 10*topCircleRadii,\
                            midWidth + faceRadii,\
                            2*triangleHeight + 22*topCircleRadii,\
                            fill = "white", width = 4)
    canvas.create_oval((midWidth-faceRadii)+topCircleRadii,\
                            2*triangleHeight + 12*topCircleRadii,\
                            (midWidth+faceRadii)-topCircleRadii,\
                            2*triangleHeight + 19*topCircleRadii,\
                            fill = "white", width = 5)
    canvas.create_line((midWidth-faceRadii)+topCircleRadii,\
                       2*triangleHeight + 14*topCircleRadii,\
                       (midWidth+faceRadii)-topCircleRadii,\
                       2*triangleHeight + 14*topCircleRadii,\
                       fill = "black", width = 4)
    canvas.create_line((midWidth-faceRadii)+topCircleRadii,\
                       2*triangleHeight + 16*topCircleRadii,\
                       (midWidth+faceRadii)-topCircleRadii,\
                       2*triangleHeight + 16*topCircleRadii,\
                       fill = "black", width = 4)
    canvas.create_line(midWidth, 2*triangleHeight + 12*topCircleRadii,\
                       midWidth, 2*triangleHeight + 19*topCircleRadii,\
                       fill = "black", width = 3)
    canvas.create_line(midWidth-4*topCircleRadii, \
                       2*triangleHeight + 13*topCircleRadii,\
                       midWidth-4*topCircleRadii,\
                       2*triangleHeight + 19*topCircleRadii,\
                       fill = "black", width = 3)
    canvas.create_line(midWidth+4*topCircleRadii, \
                       2*triangleHeight + 13*topCircleRadii,\
                       midWidth+
                       4*topCircleRadii,\
                       2*triangleHeight + 19*topCircleRadii,\
                       fill = "black", width = 3)
    canvas.create_text(midWidth, \
                       2*triangleHeight + 35*topCircleRadii,\
                       text = "Bite my shiny metal a**",\
                       width = 75*topCircleRadii, fill = "white",\
                       font = "Helvetica 30 bold")
    
    

#################################################
# bonus/optional getEvalSteps
#################################################

def getEvalSteps(expr):
    return 42

#################################################
# bonus/optional topLevelFunctionNames
#################################################

def topLevelFunctionNames(code):
    return 42

#################################################
# Test Functions
#################################################

def testPatternedMessage():
    print("Testing patternedMessage()...", end="")
    assert(patternedMessage("abc def",   "***** ***** ****")   ==
           "abcde fabcd efab")
    assert(patternedMessage("abc def", "\n***** ***** ****\n") == 
           "abcde fabcd efab")
    parms = [
    ("Go Pirates!!!", """
***************
******   ******
***************
"""),
    ("Three Diamonds!","""
    *     *     *
   ***   ***   ***
  ***** ***** *****
   ***   ***   ***
    *     *     *
"""),
    ("Go Steelers!","""
                          oooo$$$$$$$$$$$$oooo
                      oo$$$$$$$$$$$$$$$$$$$$$$$$o
                   oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$
   o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$
oo $ $ '$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$
'$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$
  $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$
  $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  '$$$
   '$$$'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     '$$$
    $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     '$$$o
   o$$'   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o
   $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$' '$$$$$$ooooo$$$$o
  o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$
  $$$$$$$$'$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$'
 ''''       $$$$    '$$$$$$$$$$$$$$$$$$$$$$$$$$$$'      o$$$
            '$$$o     '$$$$$$$$$$$$$$$$$$'$$'         $$$
              $$$o          '$$'$$$$$$'           o$$$
               $$$$o                                o$$$'
                '$$$$o      o$$$$$$o'$$$$o        o$$$$
                  '$$$$$oo     '$$$$o$$$$$o   o$$$$'
                     '$$$$$oooo  '$$$o$$$$$$$$$'
                        '$$$$$$$oo $$$$$$$$$$
                                '$$$$$$$$$$$
                                    $$$$$$$$$$$$
                                     $$$$$$$$$$'
                                      '$$$'
""")]
    solns = [
"""
GoPirates!!!GoP
irates   !!!GoP
irates!!!GoPira
"""
,
"""
    T     h     r
   eeD   iam   ond
  s!Thr eeDia monds
   !Th   ree   Dia
    m     o     n
"""
,
"""
                          GoSteelers!GoSteeler
                      s!GoSteelers!GoSteelers!GoS
                   teelers!GoSteelers!GoSteelers!GoS         te   el er
   s ! Go        Steelers!GoSteelers!GoSteelers!GoSteel       er s! GoSt
ee l e rs      !GoSteeler    s!GoSteelers!    GoSteelers       !GoSteel
ers!GoSte     elers!GoSt      eelers!GoSt      eelers!GoSt    eelers!G
  oSteele    rs!GoSteele      rs!GoSteele      rs!GoSteelers!GoSteeler
  s!GoSteelers!GoSteelers    !GoSteelers!G    oSteelers!GoSt  eele
   rs!GoSteelers!GoSteelers!GoSteelers!GoSteelers!GoSteel     ers!
    GoS   teelers!GoSteelers!GoSteelers!GoSteelers!GoSteelers     !GoSt
   eele   rs!GoSteelers!GoSteelers!GoSteelers!GoSteelers!GoSt       eele
   rs!    GoSteelers!GoSteelers!GoSteelers!GoSteelers!Go Steelers!GoSteele
  rs!GoSteelers  !GoSteelers!GoSteelers!GoSteelers!GoS   teelers!GoSteelers
  !GoSteelers!G   oSteelers!GoSteelers!GoSteelers!Go     Steel
 ers!       GoSt    eelers!GoSteelers!GoSteelers!G      oSte
            elers     !GoSteelers!GoSteelers!         GoS
              teel          ers!GoSteel           ers!
               GoSte                                elers
                !GoSte      elers!GoSteele        rs!Go
                  Steelers     !GoSteelers!   GoStee
                     lers!GoSte  elers!GoSteeler
                        s!GoSteele rs!GoSteel
                                ers!GoSteele
                                    rs!GoSteeler
                                     s!GoSteeler
                                      s!GoS
"""
    ]
    parms = [("A-C D?", """
*** *** ***
** ** ** **
"""),
    ("A", "x y z"),
    ("The pattern is empty!", "")
    ]
    solns = [
"""
A-C D?A -CD
?A -C D? A-
""",
"A A A",
""
    ]
    for i in range(len(parms)):
        (msg,pattern) = parms[i]
        soln = solns[i]
        soln = soln.strip("\n")
        observed = patternedMessage(msg, pattern)
        #observed = patternedMessage(msg, pattern).strip("\n")
        #print "\n\n***********************\n\n"
        #print msg, pattern
        #print "<"+patternedMessage(msg, pattern)+">"
        #print "<"+soln+">"
        assert(observed == soln)
    print("Passed!")

def testEncodeRightLeftRouteCipher():
    print('Testing encodeRightLeftRouteCipher()...', end='')
    assert(encodeRightLeftRouteCipher("WEATTACKATDAWN",4) ==
                                      "4WTAWNTAEACDzyAKT")
    assert(encodeRightLeftRouteCipher("WEATTACKATDAWN",3) ==
                                      "3WTCTWNDKTEAAAAz") 
    assert(encodeRightLeftRouteCipher("WEATTACKATDAWN",5) ==
                                      "5WADACEAKWNATTTz") 
    print('Passed!')

def testDecodeRightLeftRouteCipher():
    print('Testing decodeRightLeftRouteCipher()...', end='')
    assert(decodeRightLeftRouteCipher("4WTAWNTAEACDzyAKT") ==
                                      "WEATTACKATDAWN")
    assert(decodeRightLeftRouteCipher("3WTCTWNDKTEAAAAz") ==
                                      "WEATTACKATDAWN") 
    assert(decodeRightLeftRouteCipher("5WADACEAKWNATTTz") ==
                                      "WEATTACKATDAWN") 
    text = "WEATTACKATDAWN"
    cipher = encodeRightLeftRouteCipher(text, 6)
    plaintext = decodeRightLeftRouteCipher(cipher)
    assert(plaintext == text)
    print('Passed!')

def runDrawNiceRobot(width=300, height=300):
    root = Tk()
    root.resizable(width=False, height=False) # non-resizable
    canvas = Canvas(root, width=width, height=height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    drawNiceRobot(canvas, width, height)
    root.mainloop()
    print("bye!")

def runDrawSimpleTortoiseProgram(program, width, height):
    root = Tk()
    root.resizable(width=False, height=False) # non-resizable
    canvas = Canvas(root, width=width, height=height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    drawSimpleTortoiseProgram(program, canvas, width, height)
    root.mainloop()
    print("bye!")

def testDrawSimpleTortoiseProgram():
    print("Testing drawSimpleTortoiseProgram()...")
    print("Since this is graphics, this test is not interactive.")
    print("Inspect each of these results manually to verify them.")
    runDrawSimpleTortoiseProgram("""
# This is a simple tortoise program
color blue
move 50

left 90

color red
move 100

color none # turns off drawing
move 50

right 45

color green # drawing is on again
move 50

right 45

color orange
move 50

right 90

color purple
move 100
""", 300, 400)

    runDrawSimpleTortoiseProgram("""
# Y
color red
right 45
move 50
right 45
move 50
right 180
move 50
right 45
move 50
color none # space
right 45
move 25

# E
color green
right 90
move 85
left 90
move 50
right 180
move 50
right 90
move 42
right 90
move 50
right 180
move 50
right 90
move 43
right 90
move 50  # space
color none
move 25

# S
color blue
move 50
left 180
move 50
left 90
move 43
left 90
move 50
right 90
move 42
right 90
move 50
""", 500, 500)
    print("Done!")

def testDrawNiceRobot():
    print('Calling runDrawRobot(400, 400):')
    runDrawNiceRobot(400, 400)
    print('Calling runDrawRobot(800, 800):')
    runDrawNiceRobot(800, 800)

def testBonusTopLevelFunctionNames():
    print("Testing topLevelFunctionNames()...", end="")

    # no fn defined
    code = """\
# This has no functions!
# def f(): pass
print("Hello world!")
"""
    assert(topLevelFunctionNames(code) == "")

    # f is redefined
    code = """\
def f(x): return x+42
def g(x): return x+f(x)
def f(x): return x-42
"""
    assert(topLevelFunctionNames(code) == "f.g")

    # def not at start of line
    code = """\
def f(): return "def g(): pass"
"""
    assert(topLevelFunctionNames(code) == "f")

    # g() is in triple-quotes (''')
    code = """\
def f(): return '''
def g(): pass'''
"""
    assert(topLevelFunctionNames(code) == "f")

    # g() is in triple-quotes (""")
    code = '''\
def f(): return """
def g(): pass"""
'''
    assert(topLevelFunctionNames(code) == "f")

    # triple-quote (''') in comment
    code = """\
def f(): return 42 # '''
def g(): pass # '''
"""
    assert(topLevelFunctionNames(code) == "f.g")

    # triple-quote (""") in comment
    code = '''\
def f(): return 42 # """
def g(): pass # """
'''
    assert(topLevelFunctionNames(code) == "f.g")

    # comment character (#) in quotes
    code = """\
def f(): return '#' + '''
def g(): pass # '''
def h(): return "#" + '''
def i(): pass # '''
def j(): return '''#''' + '''
def k(): pass # '''
"""
    assert(topLevelFunctionNames(code) == "f.h.j")
    print("Passed!")

def testBonusGetEvalSteps():
    print("Testing getEvalSteps()...", end="")
    assert(getEvalSteps("0") == "0 = 0")
    assert(getEvalSteps("2") == "2 = 2")
    assert(getEvalSteps("3+2") == "3+2 = 5")
    assert(getEvalSteps("3-2") == "3-2 = 1")
    assert(getEvalSteps("3**2") == "3**2 = 9")
    assert(getEvalSteps("31%16") == "31%16 = 15")
    assert(getEvalSteps("31*16") == "31*16 = 496")
    assert(getEvalSteps("32//16") == "32//16 = 2")
    assert(getEvalSteps("2+3*4") == "2+3*4 = 2+12\n      = 14")
    assert(getEvalSteps("2*3+4") == "2*3+4 = 6+4\n      = 10")
    assert(getEvalSteps("2+3*4-8**3%3") == """\
2+3*4-8**3%3 = 2+3*4-512%3
             = 2+12-512%3
             = 2+12-2
             = 14-2
             = 12""")
    assert(getEvalSteps("2+3**4%2**4+15//3-8") == """\
2+3**4%2**4+15//3-8 = 2+81%2**4+15//3-8
                    = 2+81%16+15//3-8
                    = 2+1+15//3-8
                    = 2+1+5-8
                    = 3+5-8
                    = 8-8
                    = 0""")
    print("Passed!")

#################################################
# testAll and main
#################################################

def testAll():
    #testPatternedMessage()
    #testEncodeRightLeftRouteCipher()
    #testDecodeRightLeftRouteCipher()
    #testDrawSimpleTortoiseProgram()
    testDrawNiceRobot()
    #testBonusTopLevelFunctionNames()
    #testBonusGetEvalSteps()

def main():
    cs112_f19_week3_linter.lint()
    testAll()

if __name__ == '__main__':
    main()
